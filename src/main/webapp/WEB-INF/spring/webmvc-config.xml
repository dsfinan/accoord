<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
				
	<!-- The controllers are autodetected POJOs labeled with the @Controller annotation. -->
	<context:component-scan base-package="com.accoord" use-default-filters="false">
		<context:include-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
	</context:component-scan>
	
	<!-- Turns on support for mapping requests to Spring MVC @Controller methods
	     Also registers default Formatters and Validators for use across all @Controllers -->
	<mvc:annotation-driven conversion-service="applicationConversionService"/>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources -->
	<mvc:resources location="/, classpath:/META-INF/web-resources/" mapping="/resources/**"/>
	
	<!-- Allows for mapping the DispatcherServlet to "/" by forwarding static resource requests to the container's default Servlet -->
	<!-- mvc:default-servlet-handler /-->
	
	<!-- register "global" interceptor beans to apply to all registered HandlerMappings -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" p:paramName="lang"/>
	</mvc:interceptors>
	
	<!-- selects a static view for rendering without the need for an explicit controller -->
	<mvc:view-controller path="/profile" view-name="profile"/>
    <mvc:view-controller path="/login/**" view-name="login"/>
    <mvc:view-controller path="/" view-name="index"/>
	<mvc:view-controller path="/uncaughtException"/>
	<mvc:view-controller path="/resourceNotFound"/>
	<mvc:view-controller path="/dataAccessFailure"/>
	<mvc:view-controller path="/home" view-name="home"/>
	<mvc:view-controller path="/register" view-name="register"/>
	<mvc:view-controller path="/forgotpassword" view-name="forgotpassword"/>
	<mvc:view-controller path="/resetpass" view-name="resetpassword"/>
	<mvc:view-controller path="/changepassword" view-name="changepassword"/>
	<mvc:view-controller path="/addnewuser" view-name="addnewuser"/>
	<mvc:view-controller path="/recovery" view-name="recovery"/>
	<mvc:view-controller path="/legal" view-name="legal"/>
	<mvc:view-controller path="/about" view-name="about"/>
	<mvc:view-controller path="/help" view-name="help"/>
		
		
	<!-- Resolves localized messages*.properties and application.properties files in the application to	allow for internationalization. 
		The messages*.properties files translate Roo generated messages which are part of the admin interface, the application.properties
		resource bundle localizes all application specific messages such as entity names and menu items. -->
	<bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource" id="messageSource" p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application" p:fallbackToSystemLocale="false"/>
	
	<!-- store preferred language configuration in a cookie -->
	<bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver" id="localeResolver" p:cookieName="locale"/>	

	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver"/>
	
	<!-- resolves localized <theme_name>.properties files in the classpath to allow for theme support -->
	<bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource"/>
	<bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
   	 <property name="mappings">
   	 	<props>
			<prop key="/checkorganization">checkorg</prop>
			<prop key="/registeraction">registeraction</prop>
			<prop key="/confirmemail">confirmemail</prop>
			<prop key="/forgotpasswordaction">forgotpasswordaction</prop>
			<prop key="/resetpasswordaction">resetpasswordaction</prop>
			<prop key="/resetpassword">resetpassword</prop>
			<prop key="/changepasswordaction">changepasswordaction</prop>
			<prop key="/addnewuseraction">addnewuseraction</prop>
			<prop key="/uploadFile">fileUploadController</prop>
			
		</props>

   	</property>
   	
   </bean>	
   		
	<mvc:default-servlet-handler/>
		   
   	<bean class="com.accoord.web.CheckOrganization" id="checkorg"/>
   	<bean class="com.accoord.web.RegisterAction" id="registeraction"/>
   	<bean class="com.accoord.web.ConfirmEmail" id="confirmemail"/>
   	<bean class="com.accoord.web.ForgotPasswordAction" id="forgotpasswordaction"/>
   	<bean class="com.accoord.web.ResetPasswordAction" id="resetpasswordaction"/>
   	<bean class="com.accoord.web.ResetPassword" id="resetpassword"/>
   	<bean class="com.accoord.web.ChangePasswordAction" id="changepasswordaction"/>
   	<bean class="com.accoord.web.AddNewUserAction" id="addnewuseraction"/>
   	
   	
   <!-- store preferred theme configuration in a cookie -->
	<bean class="org.springframework.web.servlet.theme.CookieThemeResolver" id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard"/>

	<!-- This bean resolves specific types of exceptions to corresponding logical - view names for error views. 
	     The default behaviour of DispatcherServlet - is to propagate all exceptions to the servlet container: 
	     this will happen - here with all other types of exceptions. -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
		<property name="exceptionMappings">
			<props>
				<prop key=".DataAccessException">dataAccessFailure</prop>
				<prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
				<prop key=".TypeMismatchException">resourceNotFound</prop>
				<prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
			</props>
		</property>
	</bean>
	
	<!-- allows for integration of file upload functionality -->

	<bean class="com.accoord.web.FileUploadController" id="fileUploadController">
        <property name="commandClass" value="com.accoord.web.FileUploadBean"/>
        <property name="formView" value="fileuploadform"/>
        <property name="successView" value="confirmation"/>
    </bean>
	<!--Installs application converters and formatters-->
	<bean class="com.accoord.web.ApplicationConversionServiceFactoryBean" id="applicationConversionService"/>
<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" id="tilesViewResolver">
    <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
  </bean>
    <bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer" id="tilesConfigurer">
    <property name="definitions">
      <list>
        <value>/WEB-INF/layouts/layouts.xml</value>
        <!-- Scan views directory for Tiles configurations -->
        <value>/WEB-INF/views/**/views.xml</value>
      </list>
    </property>
  </bean>
</beans>
