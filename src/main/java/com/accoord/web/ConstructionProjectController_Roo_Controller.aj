// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.accoord.web;

import com.accoord.domain.ConstructionProject;
import com.accoord.domain.ConstructionUpdate;
import com.accoord.domain.ServiceArea;
import com.accoord.domain.UserEntity;
import com.accoord.shared.ConstructionType;
import com.accoord.shared.ShelterType;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ConstructionProjectController_Roo_Controller {
    
    @Autowired
    private GenericConversionService ConstructionProjectController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String ConstructionProjectController.create(@Valid ConstructionProject constructionProject, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("constructionProject", constructionProject);
            addDateTimeFormatPatterns(model);
            return "constructionprojects/create";
        }
        constructionProject.persist();
        return "redirect:/constructionprojects/" + encodeUrlPathSegment(constructionProject.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String ConstructionProjectController.createForm(Model model) {
        model.addAttribute("constructionProject", new ConstructionProject());
        addDateTimeFormatPatterns(model);
        List dependencies = new ArrayList();
        if (ServiceArea.countServiceAreas() == 0) {
            dependencies.add(new String[]{"area", "serviceareas"});
        }
        if (UserEntity.countUserEntitys() == 0) {
            dependencies.add(new String[]{"owner", "userentitys"});
        }
        model.addAttribute("dependencies", dependencies);
        return "constructionprojects/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String ConstructionProjectController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("constructionproject", ConstructionProject.findConstructionProject(id));
        model.addAttribute("itemId", id);
        return "constructionprojects/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String ConstructionProjectController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("constructionprojects", ConstructionProject.findConstructionProjectEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) ConstructionProject.countConstructionProjects() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("constructionprojects", ConstructionProject.findAllConstructionProjects());
        }
        addDateTimeFormatPatterns(model);
        return "constructionprojects/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String ConstructionProjectController.update(@Valid ConstructionProject constructionProject, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("constructionProject", constructionProject);
            addDateTimeFormatPatterns(model);
            return "constructionprojects/update";
        }
        constructionProject.merge();
        return "redirect:/constructionprojects/" + encodeUrlPathSegment(constructionProject.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String ConstructionProjectController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("constructionProject", ConstructionProject.findConstructionProject(id));
        addDateTimeFormatPatterns(model);
        return "constructionprojects/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String ConstructionProjectController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        ConstructionProject.findConstructionProject(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/constructionprojects?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("constructionupdates")
    public Collection<ConstructionUpdate> ConstructionProjectController.populateConstructionUpdates() {
        return ConstructionUpdate.findAllConstructionUpdates();
    }
    
    @ModelAttribute("serviceareas")
    public Collection<ServiceArea> ConstructionProjectController.populateServiceAreas() {
        return ServiceArea.findAllServiceAreas();
    }
    
    @ModelAttribute("userentitys")
    public Collection<UserEntity> ConstructionProjectController.populateUserEntitys() {
        return UserEntity.findAllUserEntitys();
    }
    
    @ModelAttribute("constructiontypes")
    public Collection<ConstructionType> ConstructionProjectController.populateConstructionTypes() {
        return Arrays.asList(ConstructionType.class.getEnumConstants());
    }
    
    @ModelAttribute("sheltertypes")
    public Collection<ShelterType> ConstructionProjectController.populateShelterTypes() {
        return Arrays.asList(ShelterType.class.getEnumConstants());
    }
    
    Converter<ConstructionProject, String> ConstructionProjectController.getConstructionProjectConverter() {
        return new Converter<ConstructionProject, String>() {
            public String convert(ConstructionProject constructionProject) {
                return new StringBuilder().append(constructionProject.getCreateddate()).append(" ").append(constructionProject.getDescription()).append(" ").append(constructionProject.getEstimatedstartdate()).toString();
            }
        };
    }
    
    Converter<ConstructionUpdate, String> ConstructionProjectController.getConstructionUpdateConverter() {
        return new Converter<ConstructionUpdate, String>() {
            public String convert(ConstructionUpdate constructionUpdate) {
                return new StringBuilder().append(constructionUpdate.getUpdated()).append(" ").append(constructionUpdate.getActualunitsbuilt()).append(" ").append(constructionUpdate.getNote()).toString();
            }
        };
    }
    
    Converter<ServiceArea, String> ConstructionProjectController.getServiceAreaConverter() {
        return new Converter<ServiceArea, String>() {
            public String convert(ServiceArea serviceArea) {
                return new StringBuilder().append(serviceArea.getName()).append(" ").append(serviceArea.getDescription()).append(" ").append(serviceArea.getCreated()).toString();
            }
        };
    }
    
    Converter<UserEntity, String> ConstructionProjectController.getUserEntityConverter() {
        return new Converter<UserEntity, String>() {
            public String convert(UserEntity userEntity) {
                return new StringBuilder().append(userEntity.getUsername()).append(" ").append(userEntity.getPassword()).append(" ").append(userEntity.getEmail()).toString();
            }
        };
    }
    
    @PostConstruct
    void ConstructionProjectController.registerConverters() {
        conversionService.addConverter(getConstructionProjectConverter());
        conversionService.addConverter(getConstructionUpdateConverter());
        conversionService.addConverter(getServiceAreaConverter());
        conversionService.addConverter(getUserEntityConverter());
    }
    
    void ConstructionProjectController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("constructionProject_createddate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        model.addAttribute("constructionProject_estimatedenddate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
        model.addAttribute("constructionProject_estimatedstartdate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    private String ConstructionProjectController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
