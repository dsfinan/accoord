// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.accoord.web;

import com.accoord.domain.ConstructionProject;
import com.accoord.domain.Distribution;
import com.accoord.domain.Equipment;
import com.accoord.domain.Event;
import com.accoord.domain.Message;
import com.accoord.domain.ServiceArea;
import com.accoord.domain.ShelterProject;
import com.accoord.domain.Training;
import com.accoord.domain.UserEntity;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ServiceAreaController_Roo_Controller {
    
    @Autowired
    private GenericConversionService ServiceAreaController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String ServiceAreaController.create(@Valid ServiceArea serviceArea, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("serviceArea", serviceArea);
            addDateTimeFormatPatterns(model);
            return "serviceareas/create";
        }
        serviceArea.persist();
        return "redirect:/serviceareas/" + encodeUrlPathSegment(serviceArea.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String ServiceAreaController.createForm(Model model) {
        model.addAttribute("serviceArea", new ServiceArea());
        addDateTimeFormatPatterns(model);
        List dependencies = new ArrayList();
        if (Event.countEvents() == 0) {
            dependencies.add(new String[]{"event", "events"});
        }
        if (UserEntity.countUserEntitys() == 0) {
            dependencies.add(new String[]{"owner", "userentitys"});
        }
        model.addAttribute("dependencies", dependencies);
        return "serviceareas/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String ServiceAreaController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("servicearea", ServiceArea.findServiceArea(id));
        model.addAttribute("itemId", id);
        return "serviceareas/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String ServiceAreaController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("serviceareas", ServiceArea.findServiceAreaEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) ServiceArea.countServiceAreas() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("serviceareas", ServiceArea.findAllServiceAreas());
        }
        addDateTimeFormatPatterns(model);
        return "serviceareas/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String ServiceAreaController.update(@Valid ServiceArea serviceArea, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("serviceArea", serviceArea);
            addDateTimeFormatPatterns(model);
            return "serviceareas/update";
        }
        serviceArea.merge();
        return "redirect:/serviceareas/" + encodeUrlPathSegment(serviceArea.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String ServiceAreaController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("serviceArea", ServiceArea.findServiceArea(id));
        addDateTimeFormatPatterns(model);
        return "serviceareas/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String ServiceAreaController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        ServiceArea.findServiceArea(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/serviceareas?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("constructionprojects")
    public Collection<ConstructionProject> ServiceAreaController.populateConstructionProjects() {
        return ConstructionProject.findAllConstructionProjects();
    }
    
    @ModelAttribute("distributions")
    public Collection<Distribution> ServiceAreaController.populateDistributions() {
        return Distribution.findAllDistributions();
    }
    
    @ModelAttribute("equipments")
    public Collection<Equipment> ServiceAreaController.populateEquipments() {
        return Equipment.findAllEquipments();
    }
    
    @ModelAttribute("events")
    public Collection<Event> ServiceAreaController.populateEvents() {
        return Event.findAllEvents();
    }
    
    @ModelAttribute("messages")
    public Collection<Message> ServiceAreaController.populateMessages() {
        return Message.findAllMessages();
    }
    
    @ModelAttribute("shelterprojects")
    public Collection<ShelterProject> ServiceAreaController.populateShelterProjects() {
        return ShelterProject.findAllShelterProjects();
    }
    
    @ModelAttribute("trainings")
    public Collection<Training> ServiceAreaController.populateTrainings() {
        return Training.findAllTrainings();
    }
    
    @ModelAttribute("userentitys")
    public Collection<UserEntity> ServiceAreaController.populateUserEntitys() {
        return UserEntity.findAllUserEntitys();
    }
    
    Converter<ConstructionProject, String> ServiceAreaController.getConstructionProjectConverter() {
        return new Converter<ConstructionProject, String>() {
            public String convert(ConstructionProject constructionProject) {
                return new StringBuilder().append(constructionProject.getCreateddate()).append(" ").append(constructionProject.getDescription()).append(" ").append(constructionProject.getEstimatedstartdate()).toString();
            }
        };
    }
    
    Converter<Distribution, String> ServiceAreaController.getDistributionConverter() {
        return new Converter<Distribution, String>() {
            public String convert(Distribution distribution) {
                return new StringBuilder().append(distribution.getDateperformed()).append(" ").append(distribution.getDescription()).append(" ").append(distribution.getNumber_units()).toString();
            }
        };
    }
    
    Converter<Equipment, String> ServiceAreaController.getEquipmentConverter() {
        return new Converter<Equipment, String>() {
            public String convert(Equipment equipment) {
                return new StringBuilder().append(equipment.getCreated()).append(" ").append(equipment.getDescription()).append(" ").append(equipment.getLat()).toString();
            }
        };
    }
    
    Converter<Event, String> ServiceAreaController.getEventConverter() {
        return new Converter<Event, String>() {
            public String convert(Event event) {
                return new StringBuilder().append(event.getName()).append(" ").append(event.getDescription()).append(" ").append(event.getCountry()).toString();
            }
        };
    }
    
    Converter<Message, String> ServiceAreaController.getMessageConverter() {
        return new Converter<Message, String>() {
            public String convert(Message message) {
                return new StringBuilder().append(message.getMessage()).append(" ").append(message.getCreated()).toString();
            }
        };
    }
    
    Converter<ServiceArea, String> ServiceAreaController.getServiceAreaConverter() {
        return new Converter<ServiceArea, String>() {
            public String convert(ServiceArea serviceArea) {
                return new StringBuilder().append(serviceArea.getName()).append(" ").append(serviceArea.getDescription()).append(" ").append(serviceArea.getCreated()).toString();
            }
        };
    }
    
    Converter<ShelterProject, String> ServiceAreaController.getShelterProjectConverter() {
        return new Converter<ShelterProject, String>() {
            public String convert(ShelterProject shelterProject) {
                return new StringBuilder().append(shelterProject.getCreateddate()).append(" ").append(shelterProject.getEstimatedstartdate()).append(" ").append(shelterProject.getEstimatedenddate()).toString();
            }
        };
    }
    
    Converter<Training, String> ServiceAreaController.getTrainingConverter() {
        return new Converter<Training, String>() {
            public String convert(Training training) {
                return new StringBuilder().append(training.getDate_performed()).append(" ").append(training.getDescription()).append(" ").append(training.getNumber_attended()).toString();
            }
        };
    }
    
    Converter<UserEntity, String> ServiceAreaController.getUserEntityConverter() {
        return new Converter<UserEntity, String>() {
            public String convert(UserEntity userEntity) {
                return new StringBuilder().append(userEntity.getUsername()).append(" ").append(userEntity.getPassword()).append(" ").append(userEntity.getEmail()).toString();
            }
        };
    }
    
    @PostConstruct
    void ServiceAreaController.registerConverters() {
        conversionService.addConverter(getConstructionProjectConverter());
        conversionService.addConverter(getDistributionConverter());
        conversionService.addConverter(getEquipmentConverter());
        conversionService.addConverter(getEventConverter());
        conversionService.addConverter(getMessageConverter());
        conversionService.addConverter(getServiceAreaConverter());
        conversionService.addConverter(getShelterProjectConverter());
        conversionService.addConverter(getTrainingConverter());
        conversionService.addConverter(getUserEntityConverter());
    }
    
    void ServiceAreaController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("serviceArea_created_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    private String ServiceAreaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
