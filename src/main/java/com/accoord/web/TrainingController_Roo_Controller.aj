// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.accoord.web;

import com.accoord.domain.ServiceArea;
import com.accoord.domain.Training;
import com.accoord.domain.UserEntity;
import com.accoord.shared.Sector;
import com.accoord.shared.TrainingType;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect TrainingController_Roo_Controller {
    
    @Autowired
    private GenericConversionService TrainingController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String TrainingController.create(@Valid Training training, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("training", training);
            addDateTimeFormatPatterns(model);
            return "trainings/create";
        }
        training.persist();
        return "redirect:/trainings/" + encodeUrlPathSegment(training.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String TrainingController.createForm(Model model) {
        model.addAttribute("training", new Training());
        addDateTimeFormatPatterns(model);
        List dependencies = new ArrayList();
        if (UserEntity.countUserEntitys() == 0) {
            dependencies.add(new String[]{"owner", "userentitys"});
        }
        model.addAttribute("dependencies", dependencies);
        return "trainings/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String TrainingController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("training", Training.findTraining(id));
        model.addAttribute("itemId", id);
        return "trainings/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String TrainingController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("trainings", Training.findTrainingEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Training.countTrainings() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("trainings", Training.findAllTrainings());
        }
        addDateTimeFormatPatterns(model);
        return "trainings/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String TrainingController.update(@Valid Training training, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("training", training);
            addDateTimeFormatPatterns(model);
            return "trainings/update";
        }
        training.merge();
        return "redirect:/trainings/" + encodeUrlPathSegment(training.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String TrainingController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("training", Training.findTraining(id));
        addDateTimeFormatPatterns(model);
        return "trainings/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String TrainingController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Training.findTraining(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/trainings?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("serviceareas")
    public Collection<ServiceArea> TrainingController.populateServiceAreas() {
        return ServiceArea.findAllServiceAreas();
    }
    
    @ModelAttribute("userentitys")
    public Collection<UserEntity> TrainingController.populateUserEntitys() {
        return UserEntity.findAllUserEntitys();
    }
    
    @ModelAttribute("sectors")
    public Collection<Sector> TrainingController.populateSectors() {
        return Arrays.asList(Sector.class.getEnumConstants());
    }
    
    @ModelAttribute("trainingtypes")
    public Collection<TrainingType> TrainingController.populateTrainingTypes() {
        return Arrays.asList(TrainingType.class.getEnumConstants());
    }
    
    Converter<ServiceArea, String> TrainingController.getServiceAreaConverter() {
        return new Converter<ServiceArea, String>() {
            public String convert(ServiceArea serviceArea) {
                return new StringBuilder().append(serviceArea.getName()).append(" ").append(serviceArea.getDescription()).append(" ").append(serviceArea.getCreated()).toString();
            }
        };
    }
    
    Converter<Training, String> TrainingController.getTrainingConverter() {
        return new Converter<Training, String>() {
            public String convert(Training training) {
                return new StringBuilder().append(training.getDate_performed()).append(" ").append(training.getDescription()).append(" ").append(training.getNumber_attended()).toString();
            }
        };
    }
    
    Converter<UserEntity, String> TrainingController.getUserEntityConverter() {
        return new Converter<UserEntity, String>() {
            public String convert(UserEntity userEntity) {
                return new StringBuilder().append(userEntity.getUsername()).append(" ").append(userEntity.getPassword()).append(" ").append(userEntity.getEmail()).toString();
            }
        };
    }
    
    @PostConstruct
    void TrainingController.registerConverters() {
        conversionService.addConverter(getServiceAreaConverter());
        conversionService.addConverter(getTrainingConverter());
        conversionService.addConverter(getUserEntityConverter());
    }
    
    void TrainingController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("training_date_performed_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    private String TrainingController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
