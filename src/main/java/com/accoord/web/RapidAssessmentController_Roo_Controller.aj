// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.accoord.web;

import com.accoord.domain.AssessmentArea;
import com.accoord.domain.RapidAssessment;
import com.accoord.domain.UserEntity;
import com.accoord.shared.ShelterConditions;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect RapidAssessmentController_Roo_Controller {
    
    @Autowired
    private GenericConversionService RapidAssessmentController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String RapidAssessmentController.create(@Valid RapidAssessment rapidAssessment, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("rapidAssessment", rapidAssessment);
            addDateTimeFormatPatterns(model);
            return "rapidassessments/create";
        }
        rapidAssessment.persist();
        return "redirect:/rapidassessments/" + encodeUrlPathSegment(rapidAssessment.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String RapidAssessmentController.createForm(Model model) {
        model.addAttribute("rapidAssessment", new RapidAssessment());
        addDateTimeFormatPatterns(model);
        List dependencies = new ArrayList();
        if (AssessmentArea.countAssessmentAreas() == 0) {
            dependencies.add(new String[]{"area", "assessmentareas"});
        }
        if (UserEntity.countUserEntitys() == 0) {
            dependencies.add(new String[]{"owner", "userentitys"});
        }
        model.addAttribute("dependencies", dependencies);
        return "rapidassessments/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String RapidAssessmentController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("rapidassessment", RapidAssessment.findRapidAssessment(id));
        model.addAttribute("itemId", id);
        return "rapidassessments/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String RapidAssessmentController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("rapidassessments", RapidAssessment.findRapidAssessmentEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) RapidAssessment.countRapidAssessments() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("rapidassessments", RapidAssessment.findAllRapidAssessments());
        }
        addDateTimeFormatPatterns(model);
        return "rapidassessments/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String RapidAssessmentController.update(@Valid RapidAssessment rapidAssessment, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("rapidAssessment", rapidAssessment);
            addDateTimeFormatPatterns(model);
            return "rapidassessments/update";
        }
        rapidAssessment.merge();
        return "redirect:/rapidassessments/" + encodeUrlPathSegment(rapidAssessment.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String RapidAssessmentController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("rapidAssessment", RapidAssessment.findRapidAssessment(id));
        addDateTimeFormatPatterns(model);
        return "rapidassessments/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String RapidAssessmentController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        RapidAssessment.findRapidAssessment(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/rapidassessments?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("assessmentareas")
    public Collection<AssessmentArea> RapidAssessmentController.populateAssessmentAreas() {
        return AssessmentArea.findAllAssessmentAreas();
    }
    
    @ModelAttribute("userentitys")
    public Collection<UserEntity> RapidAssessmentController.populateUserEntitys() {
        return UserEntity.findAllUserEntitys();
    }
    
    @ModelAttribute("shelterconditionses")
    public Collection<ShelterConditions> RapidAssessmentController.populateShelterConditionses() {
        return Arrays.asList(ShelterConditions.class.getEnumConstants());
    }
    
    Converter<AssessmentArea, String> RapidAssessmentController.getAssessmentAreaConverter() {
        return new Converter<AssessmentArea, String>() {
            public String convert(AssessmentArea assessmentArea) {
                return new StringBuilder().append(assessmentArea.getName()).append(" ").append(assessmentArea.getDescription()).append(" ").append(assessmentArea.getCreated()).toString();
            }
        };
    }
    
    Converter<RapidAssessment, String> RapidAssessmentController.getRapidAssessmentConverter() {
        return new Converter<RapidAssessment, String>() {
            public String convert(RapidAssessment rapidAssessment) {
                return new StringBuilder().append(rapidAssessment.getCreated()).append(" ").append(rapidAssessment.getGen_est_per_aff()).append(" ").append(rapidAssessment.getGen_est_per_aff_male()).toString();
            }
        };
    }
    
    Converter<UserEntity, String> RapidAssessmentController.getUserEntityConverter() {
        return new Converter<UserEntity, String>() {
            public String convert(UserEntity userEntity) {
                return new StringBuilder().append(userEntity.getUsername()).append(" ").append(userEntity.getPassword()).append(" ").append(userEntity.getEmail()).toString();
            }
        };
    }
    
    @PostConstruct
    void RapidAssessmentController.registerConverters() {
        conversionService.addConverter(getAssessmentAreaConverter());
        conversionService.addConverter(getRapidAssessmentConverter());
        conversionService.addConverter(getUserEntityConverter());
    }
    
    void RapidAssessmentController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("rapidAssessment_created_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    private String RapidAssessmentController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
