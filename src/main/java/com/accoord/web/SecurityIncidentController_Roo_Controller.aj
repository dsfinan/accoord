// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.accoord.web;

import com.accoord.domain.Event;
import com.accoord.domain.SecurityIncident;
import com.accoord.domain.UserEntity;
import com.accoord.shared.SecurityIncidentType;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect SecurityIncidentController_Roo_Controller {
    
    @Autowired
    private GenericConversionService SecurityIncidentController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String SecurityIncidentController.create(@Valid SecurityIncident securityIncident, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("securityIncident", securityIncident);
            addDateTimeFormatPatterns(model);
            return "securityincidents/create";
        }
        securityIncident.persist();
        return "redirect:/securityincidents/" + encodeUrlPathSegment(securityIncident.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String SecurityIncidentController.createForm(Model model) {
        model.addAttribute("securityIncident", new SecurityIncident());
        addDateTimeFormatPatterns(model);
        List dependencies = new ArrayList();
        if (Event.countEvents() == 0) {
            dependencies.add(new String[]{"event", "events"});
        }
        if (UserEntity.countUserEntitys() == 0) {
            dependencies.add(new String[]{"owner", "userentitys"});
        }
        model.addAttribute("dependencies", dependencies);
        return "securityincidents/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String SecurityIncidentController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("securityincident", SecurityIncident.findSecurityIncident(id));
        model.addAttribute("itemId", id);
        return "securityincidents/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String SecurityIncidentController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("securityincidents", SecurityIncident.findSecurityIncidentEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) SecurityIncident.countSecurityIncidents() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("securityincidents", SecurityIncident.findAllSecurityIncidents());
        }
        addDateTimeFormatPatterns(model);
        return "securityincidents/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String SecurityIncidentController.update(@Valid SecurityIncident securityIncident, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("securityIncident", securityIncident);
            addDateTimeFormatPatterns(model);
            return "securityincidents/update";
        }
        securityIncident.merge();
        return "redirect:/securityincidents/" + encodeUrlPathSegment(securityIncident.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String SecurityIncidentController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("securityIncident", SecurityIncident.findSecurityIncident(id));
        addDateTimeFormatPatterns(model);
        return "securityincidents/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String SecurityIncidentController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        SecurityIncident.findSecurityIncident(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/securityincidents?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("events")
    public Collection<Event> SecurityIncidentController.populateEvents() {
        return Event.findAllEvents();
    }
    
    @ModelAttribute("userentitys")
    public Collection<UserEntity> SecurityIncidentController.populateUserEntitys() {
        return UserEntity.findAllUserEntitys();
    }
    
    @ModelAttribute("securityincidenttypes")
    public Collection<SecurityIncidentType> SecurityIncidentController.populateSecurityIncidentTypes() {
        return Arrays.asList(SecurityIncidentType.class.getEnumConstants());
    }
    
    Converter<Event, String> SecurityIncidentController.getEventConverter() {
        return new Converter<Event, String>() {
            public String convert(Event event) {
                return new StringBuilder().append(event.getName()).append(" ").append(event.getDescription()).append(" ").append(event.getCountry()).toString();
            }
        };
    }
    
    Converter<SecurityIncident, String> SecurityIncidentController.getSecurityIncidentConverter() {
        return new Converter<SecurityIncident, String>() {
            public String convert(SecurityIncident securityIncident) {
                return new StringBuilder().append(securityIncident.getIncidentdate()).append(" ").append(securityIncident.getSubject()).append(" ").append(securityIncident.getDescription()).toString();
            }
        };
    }
    
    Converter<UserEntity, String> SecurityIncidentController.getUserEntityConverter() {
        return new Converter<UserEntity, String>() {
            public String convert(UserEntity userEntity) {
                return new StringBuilder().append(userEntity.getUsername()).append(" ").append(userEntity.getPassword()).append(" ").append(userEntity.getEmail()).toString();
            }
        };
    }
    
    @PostConstruct
    void SecurityIncidentController.registerConverters() {
        conversionService.addConverter(getEventConverter());
        conversionService.addConverter(getSecurityIncidentConverter());
        conversionService.addConverter(getUserEntityConverter());
    }
    
    void SecurityIncidentController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("securityIncident_incidentdate_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    private String SecurityIncidentController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
