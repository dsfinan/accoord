// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.accoord.web;

import com.accoord.domain.Organization;
import com.accoord.domain.StockItem;
import com.accoord.domain.UserEntity;
import com.accoord.domain.Warehouse;
import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect WarehouseController_Roo_Controller {
    
    @Autowired
    private GenericConversionService WarehouseController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String WarehouseController.create(@Valid Warehouse warehouse, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("warehouse", warehouse);
            addDateTimeFormatPatterns(model);
            return "warehouses/create";
        }
        warehouse.persist();
        return "redirect:/warehouses/" + encodeUrlPathSegment(warehouse.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String WarehouseController.createForm(Model model) {
        model.addAttribute("warehouse", new Warehouse());
        addDateTimeFormatPatterns(model);
        List dependencies = new ArrayList();
        if (Organization.countOrganizations() == 0) {
            dependencies.add(new String[]{"organization", "organizations"});
        }
        if (UserEntity.countUserEntitys() == 0) {
            dependencies.add(new String[]{"owner", "userentitys"});
        }
        model.addAttribute("dependencies", dependencies);
        return "warehouses/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String WarehouseController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("warehouse", Warehouse.findWarehouse(id));
        model.addAttribute("itemId", id);
        return "warehouses/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String WarehouseController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("warehouses", Warehouse.findWarehouseEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Warehouse.countWarehouses() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("warehouses", Warehouse.findAllWarehouses());
        }
        addDateTimeFormatPatterns(model);
        return "warehouses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String WarehouseController.update(@Valid Warehouse warehouse, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("warehouse", warehouse);
            addDateTimeFormatPatterns(model);
            return "warehouses/update";
        }
        warehouse.merge();
        return "redirect:/warehouses/" + encodeUrlPathSegment(warehouse.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String WarehouseController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("warehouse", Warehouse.findWarehouse(id));
        addDateTimeFormatPatterns(model);
        return "warehouses/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String WarehouseController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Warehouse.findWarehouse(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/warehouses?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("organizations")
    public Collection<Organization> WarehouseController.populateOrganizations() {
        return Organization.findAllOrganizations();
    }
    
    @ModelAttribute("stockitems")
    public Collection<StockItem> WarehouseController.populateStockItems() {
        return StockItem.findAllStockItems();
    }
    
    @ModelAttribute("userentitys")
    public Collection<UserEntity> WarehouseController.populateUserEntitys() {
        return UserEntity.findAllUserEntitys();
    }
    
    Converter<Organization, String> WarehouseController.getOrganizationConverter() {
        return new Converter<Organization, String>() {
            public String convert(Organization organization) {
                return new StringBuilder().append(organization.getName()).toString();
            }
        };
    }
    
    Converter<StockItem, String> WarehouseController.getStockItemConverter() {
        return new Converter<StockItem, String>() {
            public String convert(StockItem stockItem) {
                return new StringBuilder().append(stockItem.getCreated()).append(" ").append(stockItem.getItem()).append(" ").append(stockItem.getUnittype()).toString();
            }
        };
    }
    
    Converter<UserEntity, String> WarehouseController.getUserEntityConverter() {
        return new Converter<UserEntity, String>() {
            public String convert(UserEntity userEntity) {
                return new StringBuilder().append(userEntity.getUsername()).append(" ").append(userEntity.getPassword()).append(" ").append(userEntity.getEmail()).toString();
            }
        };
    }
    
    Converter<Warehouse, String> WarehouseController.getWarehouseConverter() {
        return new Converter<Warehouse, String>() {
            public String convert(Warehouse warehouse) {
                return new StringBuilder().append(warehouse.getCreated()).append(" ").append(warehouse.getAddress()).append(" ").append(warehouse.getCity()).toString();
            }
        };
    }
    
    @PostConstruct
    void WarehouseController.registerConverters() {
        conversionService.addConverter(getOrganizationConverter());
        conversionService.addConverter(getStockItemConverter());
        conversionService.addConverter(getUserEntityConverter());
        conversionService.addConverter(getWarehouseConverter());
    }
    
    void WarehouseController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("warehouse_created_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    private String WarehouseController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
