// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.accoord.domain;

import com.accoord.domain.Event;
import com.accoord.domain.UserEntityDataOnDemand;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EventDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EventDataOnDemand: @Component;
    
    private Random EventDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Event> EventDataOnDemand.data;
    
    @Autowired
    private UserEntityDataOnDemand EventDataOnDemand.userEntityDataOnDemand;
    
    public Event EventDataOnDemand.getNewTransientEvent(int index) {
        com.accoord.domain.Event obj = new com.accoord.domain.Event();
        obj.setCountry("country_" + index);
        obj.setCreated(new java.util.Date());
        obj.setDateclosed(new java.util.Date());
        obj.setDescription("description_" + index);
        obj.setEventtype(com.accoord.shared.EventType.class.getEnumConstants()[0]);
        obj.setLat(new Integer(index).doubleValue());
        obj.setLng(new Integer(index).doubleValue());
        obj.setName("name_" + index);
        obj.setOpen(Boolean.TRUE);
        obj.setOwner(userEntityDataOnDemand.getRandomUserEntity());
        obj.setZoomlevel(new Integer(index).doubleValue());
        return obj;
    }
    
    public Event EventDataOnDemand.getSpecificEvent(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Event obj = data.get(index);
        return Event.findEvent(obj.getId());
    }
    
    public Event EventDataOnDemand.getRandomEvent() {
        init();
        Event obj = data.get(rnd.nextInt(data.size()));
        return Event.findEvent(obj.getId());
    }
    
    public boolean EventDataOnDemand.modifyEvent(Event obj) {
        return false;
    }
    
    public void EventDataOnDemand.init() {
        data = com.accoord.domain.Event.findEventEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Event' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<com.accoord.domain.Event>();
        for (int i = 0; i < 10; i++) {
            com.accoord.domain.Event obj = getNewTransientEvent(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
